package monitoramento.comum;

import java.net.NetworkInterface;
import java.util.Enumeration;

public class ConfiguradorSistema {

    /**
     * Configura propriedades do sistema para melhor suporte a multicast
     */
    public static void configurarMulticast() {
        try {
            // Configura√ß√µes para Windows/multicast
            System.setProperty("java.net.preferIPv4Stack", "true");
            System.setProperty("java.net.preferIPv6Addresses", "false");

            // Configura√ß√µes de timeout
            System.setProperty("sun.net.useExclusiveBind", "false");

            System.out.println("[CONFIG] ‚úÖ Propriedades de sistema configuradas para multicast");

        } catch (Exception e) {
            System.err.printf("[CONFIG] Erro ao configurar propriedades: %s%n", e.getMessage());
        }
    }

    /**
     * Diagn√≥stico de rede para multicast
     */
    public static void diagnosticarRede() {
        System.out.println("\n[DIAGN√ìSTICO] üîç Verificando configura√ß√£o de rede...");

        try {
            System.out.printf("[DIAGN√ìSTICO] OS: %s %s%n",
                    System.getProperty("os.name"), System.getProperty("os.version"));
            System.out.printf("[DIAGN√ìSTICO] Java: %s%n", System.getProperty("java.version"));

            Enumeration<NetworkInterface> interfaces = NetworkInterface.getNetworkInterfaces();
            int count = 0;

            while (interfaces.hasMoreElements()) {
                NetworkInterface ni = interfaces.nextElement();

                if (ni.supportsMulticast() && ni.isUp()) {
                    count++;
                    System.out.printf("[DIAGN√ìSTICO] ‚úÖ Interface multicast: %s (%s)%n",
                            ni.getName(), ni.getDisplayName());

                    if (ni.isLoopback()) {
                        System.out.printf("  ‚îî‚îÄ üîÑ LOOPBACK (ideal para testes locais)%n");
                    }

                    // Mostrar IPs
                    ni.getInetAddresses().asIterator().forEachRemaining(addr -> {
                        System.out.printf("  ‚îî‚îÄ IP: %s%n", addr.getHostAddress());
                    });
                }
            }

            if (count == 0) {
                System.err.println("[DIAGN√ìSTICO] ‚ùå ERRO: Nenhuma interface multicast dispon√≠vel!");
            } else {
                System.out.printf("[DIAGN√ìSTICO] ‚úÖ %d interface(s) multicast dispon√≠vel(eis)%n", count);
            }

            // Testar endere√ßos multicast
            try {
                java.net.InetAddress multicastAddr = java.net.InetAddress.getByName("239.0.0.1");
                System.out.printf("[DIAGN√ìSTICO] ‚úÖ Endere√ßo multicast resolvido: %s%n", multicastAddr);
                System.out.printf("[DIAGN√ìSTICO] ‚úÖ Endere√ßo √© v√°lido para multicast: %s%n",
                        multicastAddr.isMulticastAddress());
            } catch (Exception e) {
                System.err.printf("[DIAGN√ìSTICO] ‚ùå Erro ao resolver endere√ßo multicast: %s%n", e.getMessage());
            }

            // Testar cria√ß√£o de socket
            try (java.net.DatagramSocket testSocket = new java.net.DatagramSocket()) {
                System.out.println("[DIAGN√ìSTICO] ‚úÖ Pode criar DatagramSocket");
            } catch (Exception e) {
                System.err.printf("[DIAGN√ìSTICO] ‚ùå Erro ao criar DatagramSocket: %s%n", e.getMessage());
            }

            System.out.println("[DIAGN√ìSTICO] ‚úÖ Diagn√≥stico completo.\n");

        } catch (Exception e) {
            System.err.printf("[DIAGN√ìSTICO] Erro geral no diagn√≥stico: %s%n", e.getMessage());
        }
    }

    /**
     * Inicializa√ß√£o completa do sistema
     */
    public static void inicializar() {
        configurarMulticast();
        diagnosticarRede();
    }
}